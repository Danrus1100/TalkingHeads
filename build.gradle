import java.awt.Desktop

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

def voiceMod = stonecutter.current.project.toString()
def voiceModVersion = project.voice_mod_version
def isPlasmoVoice = voiceMod == "plasmovoice"

stonecutter.const("plasmovoice", isPlasmoVoice)
stonecutter.const("voicechat", !isPlasmoVoice)

group = project.maven_group
version = "${mod_id}-${mod_version}+${minecraft_version}-${voiceMod}"

base {
    archivesName = ""
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()

    maven {
        name = 'plasmoverse-releases'
        url = 'https://repo.plasmoverse.com/releases'
    }
    maven {
        name = 'plasmoverse-snapshots'
        url = 'https://repo.plasmoverse.com/snapshots'
    }
    maven { url = 'https://maven.maxhenkel.de/repository/public' }

    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
    accessWidenerPath = project.rootProject.file("src/main/resources/talking-heads.accesswidener")
    runConfigs.all {
        ideConfigGenerated(true) // Run configurations are not created for subprojects by default
        runDir = "../../run" // Use a shared run folder and just create separate worlds
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    if (isPlasmoVoice) {
        compileOnly("su.plo.voice.api:client:${project.voice_mod_version}")
    } else {
        implementation "de.maxhenkel.voicechat:voicechat-api:${voice_mod_version}"
    }

    modApi "com.terraformersmc:modmenu:${modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

stonecutter {
    swap("mod_name", "\"${findProperty("mod_name")}\";")
    swap("mod_id", "\"${findProperty("mod_id")}\";")
    swap("mod_version", "\"${findProperty("mod_version")}\";")
    swap("mod_authors", "\"${findProperty("mod_authors")}\";")
}

processResources {
    def props = [:]

    props.put("mod_version", project.mod_version)
    props.put("voice_mod", voiceMod)
    props.put("voice_mod_version", isPlasmoVoice ? voiceModVersion : "${project.minecraft_version}-${voiceModVersion}")

    props.put("mod_name", project.mod_name)
    props.put("mod_id", project.mod_id)
    props.put("mod_version", project.mod_version)
    props.put("mod_authors", project.mod_authors)

    props.each { key, value ->
        inputs.property key, value
    }

    filesMatching(["fabric.mod.json"]) {
        expand(props)
    }

}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

//build {
//    doLast {
//        def provider = project.rootProject.layout.buildDirectory.file("libs/")
//        if (provider.isPresent()) {
//            File file = provider.get().getAsFile()
//            if (file.exists() && file.isDirectory()) {
//                Desktop.getDesktop().open(file)
//            }
//        }
//    }
//}